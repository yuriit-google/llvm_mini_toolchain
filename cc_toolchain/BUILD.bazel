load("@rules_cc//cc:defs.bzl", "cc_toolchain")
load("//features:cc_toolchain_import.bzl", "cc_toolchain_import")
load(":toolchain_config.bzl", "cc_toolchain_config")

# Add libraries and includes here
# buildifier: leave-alone
cc_toolchain_import(
    name = "all_imports",
    visibility = ["//visibility:public"],
    deps = [
        "//config:sysroot_includes_c",
        "//config:llvm_clang_includes",
        "//config:sysroot_includes_system",
        "//config:sysroot_libc",
        "//config:sysroot_pthread",
    ],
)

filegroup(
    name = "all",
    srcs = [
        ":all_imports",
        "//cc_toolchain/wrappers:all",
        "//config:llvm_all",
        "//features:startup_libs",
    ],
)

filegroup(
    name = "compiler_files",
    srcs = [
        ":all_imports",
        "//cc_toolchain/wrappers:all",
        "//config:llvm_clang",
        "//config:llvm_clang++",
    ],
)

filegroup(
    name = "linker_files",
    srcs = [
        ":compiler_files",
        "//cc_toolchain/wrappers:all",
        "//config:llvm_ld",
        "//features:startup_libs",
    ],
)

filegroup(
    name = "ar_files",
    srcs = [
        "//cc_toolchain/wrappers:all",
        "//config:llvm_ar",
    ],
)

######################################################################
# linux k8 / x86_64
######################################################################
# Add libraries and includes here
# buildifier: leave-alone
cc_toolchain_import(
    name = "imports_linux_x86_64",
    visibility = ["//visibility:public"],
    deps = [
        "@sysroot_linux_x86_64_glibc2_27//:includes_c",
        "//config:llvm_clang_includes",
        "@sysroot_linux_x86_64_glibc2_27//:includes_system",
        "@sysroot_linux_x86_64_glibc2_27//:glibc",
        "@sysroot_linux_x86_64_glibc2_27//:pthread",
    ],
)

filegroup(
    name = "all_linux_x86_64",
    srcs = [
        ":imports_linux_x86_64",
        "//cc_toolchain/wrappers:all",
        "//config:llvm_all",
        "@sysroot_linux_x86_64_glibc2_27//:startup_libs",
    ],
)

filegroup(
    name = "compiler_linux_x86_64",
    srcs = [
        ":imports_linux_x86_64",
        "//cc_toolchain/wrappers:all",
        "//config:llvm_clang",
        "//config:llvm_clang++",
    ],
)

filegroup(
    name = "linker_linux_x86_64",
    srcs = [
        ":compiler_linux_x86_64",
        "//cc_toolchain/wrappers:all",
        "//config:llvm_ld",
        "@sysroot_linux_x86_64_glibc2_27//:startup_libs",
    ],
)

filegroup(
    name = "ar_linux_x86_64",
    srcs = [
        "//cc_toolchain/wrappers:all",
        "//config:llvm_ar",
    ],
)

cc_toolchain(
    name = "linux_x86_64_toolchain",
    all_files = ":all_linux_x86_64",
    ar_files = ":ar_linux_x86_64",
    compiler_files = ":compiler_linux_x86_64",
    dwp_files = ":all_linux_x86_64",
    linker_files = ":linker_linux_x86_64",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
    toolchain_config = ":linux_x86_64_toolchain_config",
    toolchain_identifier = "linux_x86_64_toolchain",
)

cc_toolchain_config(
    name = "linux_x86_64_toolchain_config",
    archiver = "//config:llvm_ar",
    c_compiler = "//config:llvm_clang",
    cc_compiler = "//config:llvm_clang++",
    compiler_features = [
        # Hermetic libraries feature required before import.
        "//features:hermetic_libraries",
        "//features:toolchain_import",

        # Toolchain configuration
        "//features:garbage_collect_symbols",
        "//features:warnings",
        "//features:errors",
        "//features:reproducible",
        "//features:language",
        "//features:use_lld",
        "//features:sysroot_linux_x86_64",
        "//features:dbg",
        "//features:opt",
        "//features:fastbuild",
        "//features:position_independent_code",
        "//features:supports_pic",
        "//features:startup_libs",
        "//features:coverage",

        # C++ standard configuration
        "//features:c++11",
        "//features:c++14",
        "//features:c++17",
    ],
    linker = "//config:llvm_ld",
    target_cpu = "x86_64",
    target_system_name = "local",
)

toolchain(
    name = "linux_x86_64_to_x86_64",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    toolchain = ":linux_x86_64_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

######################################################################
# linux aarch64
######################################################################
# Add libraries and includes here
# buildifier: leave-alone
cc_toolchain_import(
    name = "imports_linux_aarch64",
    visibility = ["//visibility:public"],
    deps = [
        "@sysroot_linux_aarch64_glibc2_27//:includes_c",
        "//config:llvm_clang_includes",
        "@sysroot_linux_aarch64_glibc2_27//:includes_system",
        "@sysroot_linux_aarch64_glibc2_27//:glibc",
        "@sysroot_linux_aarch64_glibc2_27//:pthread",
    ],
)

filegroup(
    name = "all_linux_aarch64",
    srcs = [
        ":imports_linux_aarch64",
        "//cc_toolchain/wrappers:all",
        "//config:llvm_all",
        "@sysroot_linux_aarch64_glibc2_27//:startup_libs",
    ],
)

filegroup(
    name = "compiler_linux_aarch64",
    srcs = [
        ":all_linux_aarch64",
        "//cc_toolchain/wrappers:all",
        "//config:llvm_clang",
        "//config:llvm_clang++",
    ],
)

filegroup(
    name = "linker_linux_aarch64",
    srcs = [
        ":compiler_linux_aarch64",
        "//cc_toolchain/wrappers:all",
        "//config:llvm_ld",
        "@sysroot_linux_aarch64_glibc2_27//:startup_libs",
    ],
)

filegroup(
    name = "ar_linux_aarch64",
    srcs = [
        "//cc_toolchain/wrappers:all",
        "//config:llvm_ar",
    ],
)

cc_toolchain(
    name = "linux_aarch64_toolchain",
    all_files = ":all_linux_aarch64",
    ar_files = ":ar_linux_aarch64",
    compiler_files = ":compiler_linux_aarch64",
    dwp_files = ":all_linux_aarch64",
    linker_files = ":linker_linux_aarch64",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
    toolchain_config = ":linux_aarch64_toolchain_config",
    toolchain_identifier = "linux_aarch64_toolchain_id",
)

cc_toolchain_config(
    name = "linux_aarch64_toolchain_config",
    archiver = "//config:llvm_ar",
    c_compiler = "//config:llvm_clang",
    cc_compiler = "//config:llvm_clang++",
    compiler_features = [
        # Hermetic libraries feature required before import.
        "//features:hermetic_libraries",
        "//features:toolchain_import",

        # Toolchain configuration
        "//features:garbage_collect_symbols",
        "//features:warnings",
        "//features:errors",
        "//features:reproducible",
        "//features:language",
        "//features:use_lld",
        "//features:sysroot_linux_aarch64",
        "//features:dbg",
        "//features:opt",
        "//features:fastbuild",
        "//features:position_independent_code",
        "//features:supports_pic",
        "//features:startup_libs",
        "//features:coverage",

        # C++ standard configuration
        "//features:c++11",
        "//features:c++14",
        "//features:c++17",
    ],
    linker = "//config:llvm_ld",
    target_cpu = "aarch64",
    target_system_name = "local",
)

# buildifier: leave-alone
toolchain(
    name = "linux_x86_64_to_aarch64",
    exec_compatible_with = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    target_compatible_with = [
        "@platforms//cpu:aarch64",
        "@platforms//os:linux",
    ],
    toolchain = ":linux_aarch64_toolchain",
    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
)

######################################################################
# macos aarch64
######################################################################
cc_toolchain(
    name = "macos_arm64_toolchain",
    all_files = ":all",
    ar_files = ":ar_files",
    compiler_files = ":compiler_files",
    dwp_files = ":all",
    linker_files = ":linker_files",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 0,
    toolchain_config = ":macos_arm64_toolchain_config",
    toolchain_identifier = "macos_arm64_toolchain_id",
)

cc_toolchain_config(
    name = "macos_arm64_toolchain_config",
    archiver = "//config:llvm_ar",
    c_compiler = "//config:llvm_clang",
    cc_compiler = "//config:llvm_clang++",
    compiler_features = [
        # Hermetic libraries feature required before import.
        "//features:hermetic_libraries",
        "//features:toolchain_import",

        # Toolchain configuration
        #"//features:garbage_collect_symbols",      # error: ld64.lld: error: unknown argument '--gc-sections'
        "//features:warnings",
        "//features:errors",
        "//features:reproducible",
        "//features:language",
        "//features:use_lld",
        "//features:sysroot_macos_arm64",
        "//features:dbg",
        "//features:opt",
        "//features:fastbuild",
        "//features:position_independent_code",
        "//features:supports_pic",
        "//features:startup_libs",
        "//features:coverage",

        # C++ standard configuration
        "//features:c++11",
        "//features:c++14",
        "//features:c++17",
    ],
    linker = "//config:llvm_ld",
    target_cpu = "aarch64",
    target_system_name = "local",
)
