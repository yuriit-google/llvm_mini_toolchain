# MIT License
#
# Copyright (c) 2024 Google LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

load("@pybind11_bazel//:build_defs.bzl", "pybind_extension")
load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_proto_library", "cc_test")
load("@rules_proto//proto:defs.bzl", "proto_library")

#############################################
# C
cc_binary(
    name = "hello_world_c",
    srcs = ["hello_world.c"],
)

#############################################
# C++
cc_binary(
    name = "hello_world",
    srcs = ["hello_world.cc"],
)

cc_test(
    name = "hello_world_test",
    srcs = ["hello_world.cc"],
)

#############################################
# C++ library
cc_library(
    name = "echo",
    srcs = ["echo.cc"],
    hdrs = ["echo.h"],
    alwayslink = True,
)

cc_binary(
    name = "echo_dynamic",
    linkshared = True,
    deps = [":echo"],
)

cc_import(
    name = "echo_import",
    hdrs = ["echo.h"],
    shared_library = ":echo_dynamic",
)

cc_binary(
    name = "echoclient",
    srcs = [
        "echoclient.cc",
        ":echo_dynamic",
    ],
    deps = [":echo_import"],
)

cc_test(
    name = "echoclient_test",
    srcs = [
        "echoclient_test.cc",
        ":echo_dynamic",
    ],
    deps = [
        ":echo_import",
        "@gtest//:gtest_main",
    ],
)

#############################################
# C++ and Google Protobuf
proto_library(
    name = "protobuf_hello",
    srcs = ["protobuf_hello.proto"],
    visibility = ["//visibility:public"],
)

cc_proto_library(
    name = "protobuf_hello_lib",
    visibility = ["//visibility:public"],
    deps = [":protobuf_hello"],
)

cc_binary(
    name = "protobuf",
    srcs = ["protobuf.cc"],
    deps = [":protobuf_hello_lib"],
)

cc_test(
    name = "protobuf_test",
    srcs = ["protobuf_test.cc"],
    deps = [
        ":protobuf_hello_lib",
        "@gtest//:gtest_main",
    ],
)

#############################################
# C++ and Abseil
cc_binary(
    name = "absl",
    srcs = ["absl.cc"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
    ],
)

cc_test(
    name = "absl_test",
    srcs = ["absl_test.cc"],
    deps = [
        "@com_google_absl//absl/algorithm:container",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
        "@gtest//:gtest_main",
    ],
)

#############################################
# Hermetic CC Toolchain Ultimate Test

# Execution platform rules
cc_binary(
    name = "protogen",
    srcs = ["protogen.cc"],
    linkshared = True,
    deps = ["@pybind11"],
)

genrule(
    name = "protogen_so",
    srcs = [":protogen"],
    outs = ["protogen.so"],
    cmd = "cp $(location :protogen) $@",
)

py_binary(
    name = "protogen_tool",
    srcs = ["protogen_tool.py"],
    #args = [
    #    "-f /tmp/my.proto",
    #],
    data = [":protogen.so"],
)

genrule(
    name = "my_proto",
    outs = [
        "my.proto",
    ],
    cmd = "$(location :protogen_tool) -f $@",
    tools = [":protogen_tool"],
)

proto_library(
    name = "my_proto_library",
    srcs = [":my_proto"],
)

# Target platform rules
cc_proto_library(
    name = "my_proto_library_cc",
    deps = [":my_proto_library"],
)

cc_binary(
    name = "protoclient",
    srcs = ["protoclient.cc"],
    linkshared = True,
    linkstatic = True,
    deps = [
        ":my_proto_library_cc",
        "@com_google_protobuf//:protobuf",
        "@pybind11",
    ],
)

genrule(
    name = "protoclient_so",
    srcs = [":protoclient"],
    outs = ["protoclient.so"],
    cmd = "cp $(location :protoclient) $@",
)

py_binary(
    name = "protoclient_tool",
    srcs = ["protoclient_tool.py"],
    data = [":protoclient.so"],
    deps = [],
)

py_test(
    name = "protoclient_tool_test",
    srcs = ["protoclient_tool_test.py"],
    data = [":protoclient.so"],
    deps = [],
)

#############################################
# Tests Suite
test_suite(
    name = "all",
    tests = [
        ":absl_test",
        ":echoclient_test",
        ":protobuf_test",
        ":protoclient_tool_test",
    ],
)
